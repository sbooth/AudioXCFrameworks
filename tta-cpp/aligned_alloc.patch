--- libtta-cpp-src/libtta.cpp	2020-10-30 16:54:59.000000000 -0500
+++ libtta-cpp-src/libtta-malloc.cpp	2020-10-30 16:53:52.000000000 -0500
@@ -27,7 +27,18 @@
 #else // GNUC
 #define tta_memclear(__dest,__length) memset(__dest,0,__length)
 #define tta_memcpy(__dest,__source,__length) memcpy(__dest,__source,__length)
-#define tta_malloc(__length) aligned_alloc(16,__length)
+// From the aligned_alloc man page:
+//  In addition, aligned_alloc() returns a NULL pointer and sets errno to
+//  EINVAL if size is not an integral multiple of alignment, or if alignment
+//  is not a power of 2 at least as large as sizeof(void *).
+//
+// Asking for an alignment of 16 with 8-byte values may fail. For example,
+//  seek_table = (TTAuint64 *) tta_malloc(frames * sizeof(TTAuint64));
+// fails if frames is not even.
+//
+// Instead of aligned_alloc() just use malloc()
+//#define tta_malloc(__length) aligned_alloc(16,__length)
+#define tta_malloc(__length) malloc(__length)
 #define tta_free free
 #endif
 #else // MSVC
